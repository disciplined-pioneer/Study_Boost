from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.types import CallbackQuery
import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '7512046220:AAEEv-F0mWIjMvFDQnVOST9kBWd4DYSNud0'
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
CATEGORIES = {
    "SMM": ["–ö—É—Ä—Å 1", "–ö—É—Ä—Å 2", "–ö—É—Ä—Å 3", "–ö—É—Ä—Å 4", "–ö—É—Ä—Å 5", "–ö—É—Ä—Å 6"],
    "SEO": ["–ö—É—Ä—Å A", "–ö—É—Ä—Å B", "–ö—É—Ä—Å C", "–ö—É—Ä—Å D", "–ö—É—Ä—Å E", "–ö—É—Ä—Å F"],
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": ["–ö—É—Ä—Å X", "–ö—É—Ä—Å Y", "–ö—É—Ä—Å Z", "–ö—É—Ä—Å W", "–ö—É—Ä—Å Q", "–ö—É—Ä—Å V"],
}

PAGE_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def generate_category_buttons():
    keyboard = [
        [InlineKeyboardButton(text=category, callback_data=f"category:{category}")]
        for category in CATEGORIES
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫—É—Ä—Å–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
def generate_course_buttons(category, page, total_pages):
    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫—É—Ä—Å–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    courses = get_page_content(category, page)
    for course in courses:
        keyboard.append([InlineKeyboardButton(text=course, callback_data=f"course:{course}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination = []
    if page > 1:
        pagination.append(InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data=f"page:{category}:{page-1}"))
    pagination.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages:
        pagination.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ >>", callback_data=f"page:{category}:{page+1}"))

    if pagination:
        keyboard.append(pagination)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    keyboard.append([InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="categories")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def get_page_content(category, page):
    items = CATEGORIES[category]
    start = (page - 1) * PAGE_SIZE
    end = start + PAGE_SIZE
    return items[start:end]


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=generate_category_buttons()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data and c.data.startswith("category:"))
async def process_category(callback_query: CallbackQuery):
    category = callback_query.data.split(":")[1]
    total_pages = (len(CATEGORIES[category]) + PAGE_SIZE - 1) // PAGE_SIZE
    page = 1

    await callback_query.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
        reply_markup=generate_course_buttons(category, page, total_pages)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@dp.callback_query(lambda c: c.data and c.data.startswith("page:"))
async def process_pagination(callback_query: CallbackQuery):
    _, category, page = callback_query.data.split(":")
    page = int(page)
    total_pages = (len(CATEGORIES[category]) + PAGE_SIZE - 1) // PAGE_SIZE

    await callback_query.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
        reply_markup=generate_course_buttons(category, page, total_pages)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("course:"))
async def process_course(callback_query: CallbackQuery):
    course = callback_query.data.split(":")[1]
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å: {course}\n\nüîô –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="categories")],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º", callback_data="last_category")]
            ]
        )
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@dp.callback_query(lambda c: c.data == "categories")
async def back_to_categories(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=generate_category_buttons()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data == "last_category")
async def back_to_last_category(callback_query: CallbackQuery):
    # –ó–¥–µ—Å—å –º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
    # –ü–æ–∫–∞ —á—Ç–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = "SMM"  # –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    page = 1
    total_pages = (len(CATEGORIES[category]) + PAGE_SIZE - 1) // PAGE_SIZE

    await callback_query.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
        reply_markup=generate_course_buttons(category, page, total_pages)
    )


# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è "–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π" –∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda c: c.data == "noop")
async def noop(callback_query: CallbackQuery):
    await callback_query.answer(cache_time=30)  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
