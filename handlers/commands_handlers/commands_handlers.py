import aiosqlite
from datetime import datetime, timedelta

# –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
async def get_top_10_users():

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    current_year = datetime.now().year
    current_month = datetime.now().month
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_path = 'database/data/users_rating_history.db'
    
    async with aiosqlite.connect(database_path) as db:
        query = '''
        SELECT id_user, SUM(CAST(rating_value AS REAL)) AS total_rating
        FROM users_rating_history
        WHERE strftime('%Y', accrual_date) = ? AND strftime('%m', accrual_date) = ?
        GROUP BY id_user
        ORDER BY total_rating DESC
        LIMIT 10
        '''
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü–∞
        async with db.execute(query, (str(current_year), f"{current_month:02}")) as cursor:
            top_users = await cursor.fetchall()
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥
        return top_users

# –í—ã–≤–æ–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def user_rating(id_user):

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    current_year = datetime.now().year
    current_month = datetime.now().month
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_path = 'database/data/users_rating_history.db'
    
    async with aiosqlite.connect(database_path) as db:
        query = '''
        SELECT SUM(CAST(rating_value AS REAL)) AS total_rating
        FROM users_rating_history
        WHERE id_user = ? AND strftime('%Y', accrual_date) = ? AND strftime('%m', accrual_date) = ?
        '''
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü–∞
        async with db.execute(query, (id_user, str(current_year), f"{current_month:02}")) as cursor:
            result = await cursor.fetchone()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
        return result[0] if result[0] is not None else 0

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def fetch_user_data(user_id):
    database_path = 'database/data/users.db'
    
    async with aiosqlite.connect(database_path) as db:
        async with db.execute('''
            SELECT id, ID_user, telegram, referrer_id, name_user, city_university, name_university, faculty, course
            FROM users
            WHERE ID_user = ?
        ''', (user_id,)) as cursor:
            user_data = await cursor.fetchone()
            if user_data:
                return {
                    "id": user_data[0],
                    "ID_user": user_data[1],
                    "telegram": user_data[2],
                    "referrer_id": user_data[3],
                    "name_user": user_data[4],
                    "city_university": user_data[5],
                    "name_university": user_data[6],
                    "faculty": user_data[7],
                    "course": user_data[8],
                }
            else:
                return None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ subscription_status
async def user_subscription(user_id):
    async with aiosqlite.connect('database/data/subscription_status.db') as db:
        async with db.execute('SELECT status FROM subscription_status WHERE ID_user = ?', (user_id,)) as cursor:
            subscription_data = await cursor.fetchone()
            return subscription_data

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü–µ payments
async def payment_information(user_id):
    async with aiosqlite.connect('database/data/payments.db') as db:
        async with db.execute('SELECT payment_date, expiration_date FROM payments WHERE ID_user = ?', (user_id,)) as cursor:
            payment_data = await cursor.fetchone()
            return payment_data

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ –∫–Ω–æ–ø–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è 
async def recent_events(event_type: str = None):
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_path = 'database/data/help_suggestions.db'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–Ω –ª–∏ event_type
    if not event_type:
        return "‚ùóÔ∏è<b>–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –ø–æ–∏—Å–∫–∞.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø."

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Ç—Ä–∏ –¥–Ω—è –Ω–∞–∑–∞–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    three_days_ago = datetime.now().date() - timedelta(days=3)
    
    async with aiosqlite.connect(database_path) as db:
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∏–ø—É –∏ –¥–∞—Ç–µ
        cursor = await db.execute('''
            SELECT ID_user, date, type, content
            FROM events 
            WHERE type = ? AND date >= ?
            ORDER BY date DESC
        ''', (event_type, three_days_ago))

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        records = await cursor.fetchall()
        await cursor.close()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏
        if not records:
            return "‚ÑπÔ∏è <b>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</b> –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –¥–Ω—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç–∞
        result = "<b>üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –¥–Ω—è:</b>\n\n"
        for record in records:
            ID_user, date, type_, content = record
            line = "‚îÄ" * 30 + '\n\n'
            result += (
                f"üë§ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <i>{ID_user}</i>\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> <i>{date}</i>\n"
                f"üìå <b>–¢–∏–ø:</b> <i>{type_}</i>\n"
                f"üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b> <i>{content}</i>\n"
                f'{line}'
            )
        
        return result
