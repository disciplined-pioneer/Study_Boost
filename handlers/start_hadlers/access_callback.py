from datetime import datetime, timedelta

from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery

from keyboards.admin_keyb import subscription_menu
from keyboards.platform_keyb import platform_menu
from handlers.start_hadlers.register_handlers import new_users

from database.requests.user_search import count_referrals
from database.handlers.database_handler import add_user_rating_history
from database.handlers.database_handler import register_user, add_subscription_status, add_payment

router = Router()

@router.callback_query(F.data == "access")
async def access(callback: CallbackQuery, bot: Bot):

    # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∫–ª–∏–∫–Ω—É–ª–∏
    admin_id = callback.from_user.id
    message_id = callback.message.message_id

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await bot.edit_message_reply_markup(chat_id=admin_id, message_id=message_id, reply_markup=subscription_menu)
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def get_user_info(callback: CallbackQuery, users_list):
    current_message_id = callback.message.message_id - 1
    return next((user for user in users_list if user['ID_message'] == current_message_id), None)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
def calculate_expiration_date(payment_date, subscription_type):
    days = {
        'Basic Month': 30,
        'Premium': 30,
        'Basic Two Month': 60,
        'Three Month': 90,
        'Unlimited': 36500
    }.get(subscription_type, 0)
    return payment_date + timedelta(days=days)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
async def notify_user(bot: Bot, user_id, subscription_type, bonus_awarded: bool = False):

    text = (
        f"–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ StudyBoost —Å –ø–æ–¥–ø–∏—Å–∫–æ–π ¬´{subscription_type}¬ª! ‚úÖ"
        f"{'\n\n–¢–∞–∫–∂–µ –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –±–∞–ª–ª–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.' if bonus_awarded else ''}"
    )
    
    await bot.send_message(user_id, text, reply_markup=platform_menu)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
async def notify_referrer(bot: Bot, referrer_id, user_id, now_date):
    
    referral_count = await count_referrals(referrer_id)
    referral_message = f"–£ –í–∞—Å –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! ‚úÖ \n–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –±—ã–ª –ø–æ–≤—ã—à–µ–Ω –Ω–∞ +5 –±–∞–ª–ª–æ–≤! \n–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {referral_count}"
    await add_user_rating_history(advice_id='None', material_id='None', id_user=referrer_id, granted_by=user_id, accrual_date=now_date, action_type="new_referral", rating_value='5')
    
    await bot.send_message(chat_id=referrer_id, text=referral_message)
    
    if referral_count == 10:
        
        await add_subscription_status(referrer_id, 'Unlimited')
        await add_payment(referrer_id, now_date, now_date + timedelta(days=36500))
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ "Unlimited"
        await bot.send_message(
            referrer_id,
            (
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ\n\n"
                "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ <b>Unlimited</b>! ‚úÖ\n\n"
                "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø</b> –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.\n"
                "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏! üöÄ"
            ),
            reply_markup=platform_menu,
            parse_mode="HTML"
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data.startswith('subscription_'))
async def subscription_choice(callback: CallbackQuery, bot: Bot):

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = await get_user_info(callback, new_users)
    if not user_info:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
    subscription_type = callback.data.replace('subscription_', '').replace('_', ' ').title()
    user_id = user_info["ID_user"]
    user_info['subscription_type'] = subscription_type
    await register_user(user_info)
    await add_subscription_status(user_id, subscription_type)

    # –†–∞—Å—á–µ—Ç –∏ –∑–∞–ø–∏—Å—å –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    payment_date = user_info['date_registration']
    expiration_date = calculate_expiration_date(payment_date, subscription_type)
    await add_payment(user_id, payment_date, expiration_date)

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    new_users.remove(user_info)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    now_date = datetime.now().date()
    referrer_id = user_info.get('referrer_id')
    if referrer_id != 'None':
        await notify_referrer(bot, referrer_id, user_id, now_date)
        await add_user_rating_history(advice_id='None', material_id='None', id_user=user_id,
                                      granted_by=referrer_id, accrual_date=now_date, action_type="new_referral", rating_value='10')
        await notify_user(bot, user_id, subscription_type, bonus_awarded=True)
    else:
        await notify_user(bot, user_id, subscription_type, bonus_awarded=True)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await callback.message.answer(f"–í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user_id} ‚úÖ")
    await callback.message.edit_reply_markup(reply_markup=None)
