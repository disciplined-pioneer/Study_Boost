from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from config import ADMIN_ID
from keyboards.admin_keyb import access_keyboard
from states.registration_state import RegistrationStates

from database.requests.user_search import check_user_registration, count_users

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
new_users = []
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üìù')
async def registration_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    result, _ = await check_user_registration(user_id)
    if result:
        await message.answer('–£–ü–°! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É üö™"')
    else:
        await start_registration(message, state)

# –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def start_registration(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ")
    await state.set_state(RegistrationStates.name)

# –ì–æ—Ä–æ–¥ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
@router.message(F.text, RegistrationStates.name)
async def process_city_university(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–æ –≤–∞—à–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: ")
    await state.set_state(RegistrationStates.city_university)

# –ù–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
@router.message(F.text, RegistrationStates.city_university)
async def process_name_university(message: Message, state: FSMContext):
    await state.update_data(city_university=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è: ")
    await state.set_state(RegistrationStates.name_university)

# –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
@router.message(F.text, RegistrationStates.name_university)
async def process_faculty(message: Message, state: FSMContext):
    await state.update_data(name_university=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞: ")
    await state.set_state(RegistrationStates.faculty)

# –ù–æ–º–µ—Ä –∫—É—Ä—Å–∞
@router.message(F.text, RegistrationStates.faculty)
async def process_course(message: Message, state: FSMContext):
    await state.update_data(faculty=message.text)
    await message.answer("–ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ –≤—ã –æ–±—É—á–∞–µ—Ç–µ—Å—å? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞: ")
    await state.set_state(RegistrationStates.course)

# –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã
@router.message(F.text, RegistrationStates.course)
async def process_payment_photo(message: Message, state: FSMContext):
    await state.update_data(course=message.text)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –æ–ø–ª–∞—Ç—É: ")
    await state.set_state(RegistrationStates.payment_photo)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
@router.message(F.photo, RegistrationStates.payment_photo)
async def finish_registration(message: Message, state: FSMContext):
    global new_users
    data = await state.get_data()
    user_id = message.from_user.id
    referrer_id = data.get("referrer_id")

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ–ø–ª–∞—Ç—ã
    payment_photo = message.photo[-1].file_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = {
        "name_user": data.get("name"),
        "city_university": data.get("city_university"),
        "name_university": data.get("name_university"),
        "faculty": data.get("faculty"),
        "course": data.get("course"),
        "telegram": f"@{message.from_user.username}" if message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω",
        "ID_user": user_id,
        "ID_message": message.message_id,
        "photo_payment": payment_photo,
        "referrer_id": referrer_id,
        "date_registration": datetime.now().date() #- timedelta(days=100)
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
    user_info_text = (
        f"–ò–º—è: {data.get('name')}\n\n"
        f"–ì–æ—Ä–æ–¥ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞: {data.get('city_university')}\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞: {data.get('name_university')}\n\n"
        f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {data.get('faculty')}\n\n"
        f"–ö—É—Ä—Å: {data.get('course')}\n\n"
        f"–¢–µ–ª–µ–≥—Ä–∞–º: {'@' + message.from_user.username if message.from_user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}\n\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n\n"
        f"ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {referrer_id or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {await count_users()}\n\n"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω—É
    await message.bot.send_photo(
        chat_id=ADMIN_ID,
        photo=payment_photo,
        caption=user_info_text,
        reply_markup=access_keyboard
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    new_users.append(user_info)
    await message.answer(
        '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n'
        '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É.\n\n'
        '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ñ–µ–ª–∞–µ–º –≤–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è!'
    )
    await state.clear()