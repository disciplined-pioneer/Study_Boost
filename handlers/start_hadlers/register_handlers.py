import time

from config import ADMIN_ID
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from keyboards.admin_keyb import access_keyboard
from keyboards.cancellation_states import cancel_state
from keyboards.registration_keyb import registration_menu

from states.registration_state import RegistrationStates

from database.requests.user_search import count_users
from database.requests.user_access import can_use_feature
from handlers.commands_handlers.commands_handlers import user_subscription

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
new_users = []
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(F.text == '–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üí≥')
async def registration_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    can_use, response_message = await can_use_feature(user_id)

    if can_use == 2:
        await message.reply(response_message, reply_markup=registration_menu)

    if can_use == 1:
        await message.reply(response_message, reply_markup=registration_menu)
        await start_registration(message, state)

    if can_use == 0:
        await message.answer(
            "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå¬ª*. \n\n‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –±—É–¥–µ—Ç —É—Ç–µ—Ä—è–Ω. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )
        await start_registration(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async def start_registration(message: Message, state: FSMContext):

    time.sleep(1)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –æ–ø–ª–∞—Ç—É: ", reply_markup=cancel_state)
    await state.set_state(RegistrationStates.payment_photo)

@router.message(F.text, RegistrationStates.payment_photo)
async def cancel_registration(message: Message, state: FSMContext):
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if message.text in ['/cancellation', '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå']:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º üòä', reply_markup=registration_menu)
        return

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
@router.message(F.photo, RegistrationStates.payment_photo)
async def finish_registration(message: Message, state: FSMContext):

    global new_users
    data = await state.get_data()
    user_id = message.from_user.id
    referrer_id = data.get("referrer_id")

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ–ø–ª–∞—Ç—ã
    payment_photo = message.photo[-1].file_id
    type_ubscription = await user_subscription(user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = {
        "telegram": f"@{message.from_user.username}" if message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω",
        "ID_user": user_id,
        "ID_message": message.message_id,
        "photo_payment": payment_photo,
        "referrer_id": referrer_id,
        "date_registration": datetime.now().date() - timedelta(days=100)
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
    user_info_text = (
        f"–¢–µ–ª–µ–≥—Ä–∞–º: {'@' + message.from_user.username if message.from_user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n\n"
        f"ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {referrer_id or 'None'}\n\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {await count_users()}\n\n"
        f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {type_ubscription[0] if type_ubscription is not None else None}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω—É
    await message.bot.send_photo(
        chat_id=ADMIN_ID,
        photo=payment_photo,
        caption=user_info_text,
        reply_markup=access_keyboard
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    new_users.append(user_info)
    await message.answer(
        '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! üéâ\n\n'
        '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É.\n\n'
        '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ñ–µ–ª–∞–µ–º –≤–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è!', reply_markup=registration_menu
    )
    await state.clear()