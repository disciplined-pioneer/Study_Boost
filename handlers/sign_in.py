from aiogram import Router, F
from datetime import datetime
from keyboards.platform_keyb import platform_menu
from database.requests.user_search import check_user_registration, check_user_payment
from aiogram import types
from aiogram.fsm.context import FSMContext
from states.payment_states import PaymentStates

from config import ADMIN_ID
from handlers.register_handlers import new_users
from keyboards.admin_keyb import access_keyboard

router = Router()

async def send_user_information(message: types.Message, state: FSMContext, data, user_id, payment_photo):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = {
        "name_user": data.get("name"),
        "city_university": data.get("city_university"),
        "name_university": data.get("name_university"),
        "course": data.get("course"),
        "faculty": data.get("faculty"),
        "telegram": f"@{message.from_user.username}" if message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω",
        "ID_user": user_id,
        "ID_message": message.message_id,
        "photo_payment": payment_photo,
        "date_registration": datetime.now().date()  # - timedelta(days=100)
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(user_id=user_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
    user_info_text = (
        f"–ò–º—è: {data.get('name')}\n\n"
        f"–ì–æ—Ä–æ–¥ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞: {data.get('city_university')}\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞: {data.get('name_university')}\n\n"
        f"–ö—É—Ä—Å: {data.get('course')}\n\n"
        f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {data.get('faculty')}\n\n"
        f"–¢–µ–ª–µ–≥—Ä–∞–º: {'@' + message.from_user.username if message.from_user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}\n\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n\n"
    )
        
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω—É
    await message.bot.send_photo(
        chat_id=ADMIN_ID,
        photo=payment_photo,
        caption=user_info_text,
        reply_markup=access_keyboard
    )

    new_users.append(user_info)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ üòä')

@router.message(F.photo, PaymentStates.payment_photo)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def receive_payment_photo(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo_id = message.photo[-1].file_id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    user_data = await state.get_data()
    user_info = user_data.get("user_info")
    user_id = user_data.get("user_id")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω—É
    await send_user_information(message, state, user_info, user_id, photo_id)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.message(F.text == '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É üö™')
async def login_handler(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user_id = message.from_user.id
    result, user_info = await check_user_registration(user_id)
    
    if result:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â—ë –ø–æ–¥–ø–∏—Å–∫–∞
        user_payment = await check_user_payment(user_id)
        
        if user_payment:
            expiration_date = user_payment[3]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ expiration_date –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 4-–π –ø–æ–∑–∏—Ü–∏–∏
            now_date = datetime.now().date()
            expiration_date = datetime.strptime(expiration_date, '%Y-%m-%d').date()

            if expiration_date > now_date:
                await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –æ—Ç–∫—Ä—ã—Ç üòä', reply_markup=platform_menu)
            else:
                await message.answer(f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –≤–∞—à–µ–π –æ–ø–ª–∞—Ç–æ–π: ')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(user_info=user_info, user_id=user_id)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                await state.set_state(PaymentStates.payment_photo)
        else:
            await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.')
    else:
        await message.answer('–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üìù"!')
