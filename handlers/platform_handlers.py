from aiogram import Router, F
from aiogram import types
from keyboards.platform_keyb import platform_menu

from database.requests.user_access import can_use_feature

router = Router()

@router.message(F.text == "–°–æ–≤–µ—Ç—ã ü¶â")
async def advi—Åe_handler(message: types.Message):

    user_id = message.from_user.id
    can_use, response_message = await can_use_feature(user_id)

    if can_use:
        await message.answer(f'–í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —Å–æ–≤–µ—Ç–∞–º–∏', reply_markup=platform_menu)
    else:
        await message.answer(response_message)

@router.message(F.text == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã üìî")
async def materials_handler(message: types.Message):

    user_id = message.from_user.id
    can_use, response_message = await can_use_feature(user_id)

    if can_use:
        await message.answer(f'–í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏', reply_markup=platform_menu)
    else:
        await message.answer(response_message)

@router.message(F.text == "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üéâ")
async def events_handler(message: types.Message):

    user_id = message.from_user.id
    can_use, response_message = await can_use_feature(user_id)

    if can_use:
        await message.answer(f'–í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏', reply_markup=platform_menu)
    else:
        await message.answer(response_message)