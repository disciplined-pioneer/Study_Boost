import re
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from keyboards.platform_keyb import grade_keyboard
from keyboards.platform_keyb import view_category_keyboard

from database.requests.random_advice import get_random_advice
from database.handlers.database_handler import add_user_rating_history
from database.handlers.advice_handler import like_advice, dislike_advice

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üóÇ"
@router.message(F.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üóÇ')
async def view_categories(message: Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=view_category_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–≤–µ—Ç–æ–≤
@router.callback_query(lambda c: c.data.startswith('view_'))
async def process_callback_advice(callback_query: CallbackQuery):
    advice_type = callback_query.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–æ–≤–µ—Ç–∞ –∏–∑ callback_data

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    random_advice = await get_random_advice(advice_type)
    if random_advice == "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
        await callback_query.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    else:
        await callback_query.message.answer(f"–°–æ–≤–µ—Ç ‚Ññ{random_advice['id']} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID_{random_advice['ID_user']}: \n‚úçÔ∏è ¬´{random_advice['content']}¬ª\n\n–†–µ–π—Ç–∏–Ω–≥ —Å–æ–≤–µ—Ç–∞: {random_advice['like_advice']} üëç | üëé {random_advice['dislike_advice']}", reply_markup=grade_keyboard)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª–∞–π–∫–∞ –∏ –¥–∏–∑–ª–∞–π–∫–∞
@router.callback_query(lambda c: c.data in ['like', 'dislike'])
async def process_rating_callback(callback_query: CallbackQuery):
    action_type = callback_query.data  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: "like" –∏–ª–∏ "dislike"
    accrual_date = datetime.now().date()
    rating_value = '1' if action_type == 'like' else '-1'  # –ù–∞—á–∏—Å–ª—è–µ–º +1 –∑–∞ –ª–∞–π–∫ –∏ -1 –∑–∞ –¥–∏–∑–ª–∞–π–∫

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ ID –∏ –Ω–æ–º–µ—Ä–∞ —Å–æ–≤–µ—Ç–∞
    message_text = callback_query.message.text
    match_id = re.search(r'ID_(\d+)', message_text)
    match_advice_number = re.search(r"–°–æ–≤–µ—Ç ‚Ññ(\d+)", message_text)

    if match_id:
        user_id = int(match_id.group(1))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        advice_number = int(match_advice_number.group(1))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä —Å–æ–≤–µ—Ç–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —Å–æ–≤–µ—Ç
        await add_user_rating_history(
            id_user=user_id,
            accrual_date=accrual_date,
            action_type=action_type + '_advice',
            rating_value=rating_value
        )

        # –î–æ–±–∞–≤–ª–µ—è–µ–º –ª–∞–π–∫ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫ –Ω–∞ —Å–æ–≤–µ—Ç
        if action_type == "like":
            await like_advice(advice_number)
        if action_type == "dislike":
            await dislike_advice(advice_number)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —Å–æ–≤–µ—Ç
        try:
            await callback_query.bot.send_message(
                chat_id=user_id,
                text=f"–í–∞—à —Å–æ–≤–µ—Ç –ø–æ–ª—É—á–∏–ª {'–ª–∞–π–∫' if action_type == 'like' else '–¥–∏–∑–ª–∞–π–∫'}!"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
    await callback_query.answer(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à {'–ª–∞–π–∫' if action_type == 'like' else '–¥–∏–∑–ª–∞–π–∫'} —É—á—Ç–µ–Ω.")
    if callback_query.message.reply_markup:
        await callback_query.message.edit_reply_markup()