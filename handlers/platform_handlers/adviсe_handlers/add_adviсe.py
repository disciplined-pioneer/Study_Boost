from datetime import datetime

from aiogram import types
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from states.advi—Åe_states import Advi—ÅeStates
from database.handlers.database_handler import add_user_advice, add_user_rating_history
from keyboards.platform_keyb import platform_menu, category_keyboard
from database.requests.user_access import can_use_feature
from database.requests.advice import get_last_advice_id

router = Router()

@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç ‚ûï')
async def start_add(message: Message, state: FSMContext):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–∞
@router.callback_query(lambda c: c.data in ['study', 'health', 'social', 'work'])
async def category_selected(callback: CallbackQuery, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è
    current_state = await state.get_state()
    if current_state != Advi—ÅeStates.category_advice:

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        selected_category = callback.data
        await state.update_data(category_advice=selected_category)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await callback.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Å–æ–≤–µ—Ç–∞:")
        await callback.answer()
        await state.set_state(Advi—ÅeStates.category_advice)
    else:
        await callback.answer("–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–≤–µ—Ç–∞
@router.message(F.text, Advi—ÅeStates.category_advice)
async def process_advice(message: Message, state: FSMContext):
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_id = message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
    await state.update_data(date_publication=datetime.now().date())
    await state.update_data(ID_user=user_id)
    await state.update_data(content=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º ID –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞
    data = await state.get_data()
    user_advice_response = await add_user_advice(
        ID_user=data.get('ID_user'),
        date_publication=data.get('date_publication'),
        content=data.get('content'),
        type_advice=data.get('category_advice'),
        like_advice='0',
        dislike_advice='0'
    )

    if user_advice_response == "–°–æ–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!":
        
        # –ü–æ–ª—É—á–∞–µ–º advice_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞
        advice_id = await get_last_advice_id()  # –ó–¥–µ—Å—å –≤–∞–º –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é

        date = datetime.now().date()
        await add_user_rating_history(
            advice_id=advice_id,  # –ü–µ—Ä–µ–¥–∞–µ–º advice_id
            id_user=user_id,
            granted_by=user_id,
            accrual_date=date,
            action_type="add_advice",
            rating_value='0.5'
        )
        await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥! –í–∞—à —Å–æ–≤–µ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω, –∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ +0.5 –±–∞–ª–ª–æ–≤ –∫ –≤–∞—à–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É. –ö–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!")
    else:
        await message.answer(f"–£–ü–°, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {user_advice_response}")
        
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@router.message(F.text == "–ù–∞–∑–∞–¥ üîô")
async def back_handler(message: types.Message):

    user_id = message.from_user.id
    can_use, response_message = await can_use_feature(user_id)

    if can_use:
        await message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üòä', reply_markup=platform_menu)
    else:
        await message.answer(response_message)