from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from states.events_state import EventsStates
from keyboards.events_keyb import events_menu
from keyboards.cancellation_states import cancel_state

from database.handlers.database_handler import add_event
from database.requests.user_access import can_use_feature
from NI_assistants.sentiment_text import analyze_sentiment

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ‚ûï')
async def start_add_event(message: Message, state: FSMContext):
    user_id = message.from_user.id
    can_use, response_message = await can_use_feature(user_id)
    
    if can_use:
        await state.update_data(ID_user=user_id, date_publication=datetime.now().date())
        await message.reply(
            "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ì–ì–ì–ì-–ú–ú-–î–î</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-12-10).\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∑–∞—Ä–∞–Ω–µ–µ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É —Å–æ–±—ã—Ç–∏—é! üóìÔ∏è",
            parse_mode="HTML",
            reply_markup=cancel_state
        )
        await state.set_state(EventsStates.date)
    else:
        await message.answer(response_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(EventsStates.date)
async def process_event_date(message: Message, state: FSMContext):

    if message.text not in ['/cancellation', '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå']:
        try:
            event_date = datetime.strptime(message.text, "%Y-%m-%d").date()
            await state.update_data(date=event_date)
            await message.reply(
                "üìç <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –º–µ—Å—Ç–æ, –≥–¥–µ –ø—Ä–æ–π–¥–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –¥–æ–±–∞–≤—å—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è.\n"
                "–ß–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥—É—Ç —É–∫–∞–∑–∞–Ω–∏—è, —Ç–µ–º –ª–µ–≥—á–µ –±—É–¥–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞–π—Ç–∏ –ª–æ–∫–∞—Ü–∏—é! üó∫Ô∏è",
                parse_mode="HTML",
                reply_markup=cancel_state
            )
            await state.set_state(EventsStates.place)
        except ValueError:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã üõë\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=events_menu)
    else:
        await state.clear()
        await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º üòä', reply_markup=events_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
@router.message(EventsStates.place)
async def process_place(message: Message, state: FSMContext):

    if message.text not in ['/cancellation', '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå']:
        place = message.text.strip()
        if place:

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞
            sentiment_score = await analyze_sentiment(message.text)
            if sentiment_score <= -0.01:
                await message.answer("–í–∞—à —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç", reply_markup=events_menu)
                return
            else:
                await state.update_data(place=place)
                await message.reply(
                    "üïí <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n"
                    "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30).\n",
                    parse_mode="HTML",
                    reply_markup=cancel_state
                )
                await state.set_state(EventsStates.time)
        else:
            await message.reply("–ú–µ—Å—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º üõë\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=events_menu)
    else:
        await state.clear()
        await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º üòä', reply_markup=events_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(EventsStates.time)
async def process_event_time(message: Message, state: FSMContext):

    if message.text not in ['/cancellation', '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå']:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å SQLite
            event_time = datetime.strptime(message.text, "%H:%M").time().strftime("%H:%M")
            await state.update_data(time=event_time)

            await message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –£–∫–∞–∂–∏—Ç–µ:\n"
                "‚Ä¢ –ö–æ–≥–æ –∂–¥—ë—Ç–µ –∏ –∫—Ç–æ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?\n"
                "‚Ä¢ –ß—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏?\n"
                "‚Ä¢ –ù—É–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π?\n"
                "‚Ä¢ –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è –∏–ª–∏ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.\n\n"
                "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª–µ–≥—á–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø–æ–Ω—è—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –∏–º –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! üòä",
                parse_mode="HTML",
                reply_markup=cancel_state
            )

            await state.set_state(EventsStates.description)
        except ValueError:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ üõë\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=events_menu)
    else:
        await state.clear()
        await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º üòä', reply_markup=events_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@router.message(EventsStates.description)
async def process_description(message: Message, state: FSMContext):

    if message.text not in ['/cancellation', '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå']:
    
        description = message.text.strip()
        if description:

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞
            sentiment_score = await analyze_sentiment(message.text)
            if sentiment_score <= -0.01:
                await message.answer("–í–∞—à —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç", reply_markup=events_menu)
                return
            
            else:
                data = await state.get_data()

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                await add_event(
                    ID_user=data['ID_user'],
                    date_publication=data['date_publication'],
                    place=data['place'],
                    event_date=data['date'],
                    event_time=data['time'],  # event_time —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∞
                    description=description
                )
                await message.reply(
                    "‚úÖ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è! üéâ\n"
                    "–¢–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç —É–∑–Ω–∞—Ç—å –æ –≤–∞—à–µ–º —Å–æ–±—ã—Ç–∏–∏ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. –£–¥–∞—á–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏! ü•≥",
                    parse_mode="HTML",
                    reply_markup=events_menu
                )
                await state.clear()
        else:
            await message.reply("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º üõë\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=events_menu)
    else:
        await state.clear()
        await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º üòä', reply_markup=events_menu)