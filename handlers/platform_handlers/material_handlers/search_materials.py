import os
import json
import zipfile

from aiogram.types import FSInputFile
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from keyboards.material_keyb import material_menu
from keyboards.cancellation_states import cancel_state

from states.material_state import View_materials
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database.requests.user_access import can_use_feature
from handlers.platform_handlers.material_handlers.search_material_handlers import get_all_materials, get_file_id_material

router = Router()

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
user_results = {}

@router.message(F.text == '–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ üîç')
async def send_welcome(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    can_use, response_message = await can_use_feature(user_id)

    if can_use:
        text = (
            "üîé <b>–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ <i>–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ</i> –∏–ª–∏ <i>—Ñ—Ä–∞–∑—É</i>, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª.\n\n"
            "üìö <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Äî –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n"
            "‚Äî –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Äî 1 –∫—É—Ä—Å\n\n"
            "‚ú® –ú—ã –Ω–∞–π–¥—ë–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!"
        )

        await message.reply(text, reply_markup=cancel_state, parse_mode="HTML")
        await state.set_state(View_materials.keyword)
        
    else:
        await message.answer(response_message)

@router.message(View_materials.keyword)
async def search_materials(message: types.Message, state: FSMContext):

    if message.text not in ['/cancellation', '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå']:

        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        materials = await get_all_materials()
        query = message.text.strip().lower()
        await state.update_data(keyword=query)

        if not query:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return
        
        # –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏
        result_materials = [
            material for material in materials
            if query in material["faculty"].lower() or query in material["course"].lower() or query in material["subject"].lower() or query in material["topic"].lower() or query in material["description_material"].lower()
        ]

        if not result_materials:
            await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É üòï")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_results[message.chat.id] = result_materials

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        all_material = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=el['topic'], callback_data=f'material_id:{el["material_id"]}')] for el in result_materials
            ]
        )

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        response_text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–µ–º—ã:"
        await message.reply(response_text, reply_markup=all_material)
    
    else:
        await state.clear()
        await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º üòä', reply_markup=material_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@router.callback_query(lambda c: c.data.startswith("material_id"))
async def material_id(callback_query: CallbackQuery, state: FSMContext):

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    materials = await get_all_materials()
    material_id = callback_query.data.split(':')[-1]
    element = next((material for material in materials if material['material_id'] == material_id), None)

    if element is None:
        await callback_query.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "üîë –°–∫–∞—á–∞—Ç—å" –∏ "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    download_menu = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üîë –°–∫–∞—á–∞—Ç—å', callback_data=f'download:{material_id}')],
            [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]
        ]
    )

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ
    await callback_query.message.edit_text(
        f"üéì <b>–§–∞–∫—É–ª—å—Ç–µ—Ç:</b> {element['faculty']}\n\n"
        f"üìò <b>–ö—É—Ä—Å:</b> {element['course']}\n\n"
        f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {element['subject']}\n\n"
        f"üìÑ <b>–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞:</b> {element['type_material']}\n\n"
        f"üìå <b>–¢–µ–º–∞:</b> {element['topic']}\n\n\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{element['description_material']}\n\n"
        "‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=download_menu,
        parse_mode="HTML"
    )
    await state.update_data(topic=element['topic'])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith("download:"))
async def download_material(callback_query: CallbackQuery, state: FSMContext):

    data = await state.get_data()
    bot = callback_query.bot
    user_id = str(callback_query.from_user.id) 
    material_id = int(callback_query.data.split(':')[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ë–î
    files_data_text = await get_file_id_material(material_id)  # –ó–¥–µ—Å—å –≤–∞—à –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    files_data = json.loads(files_data_text.replace("'", '"'))
    file_ids = [item['file_id'] for item in files_data]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ file_id
    
    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    user_folder = f"temp_zip/{user_id}"
    os.makedirs(user_folder, exist_ok=True)
    zip_filename = f"{user_folder}/{data['topic']}.zip"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞—ë–º ZIP-–∞—Ä—Ö–∏–≤
    with zipfile.ZipFile(zip_filename, 'w') as zipf:
        for idx, file_id in enumerate(file_ids):
            file = await bot.get_file(file_id)  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram
            local_file_path = os.path.join(user_folder, f"file_{idx}.{file.file_path.split('.')[-1]}")
            await bot.download_file(file.file_path, local_file_path)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            
            zipf.write(local_file_path, f"file_{idx}.{file.file_path.split('.')[-1]}")  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞—Ä—Ö–∏–≤
            os.remove(local_file_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    document = FSInputFile(zip_filename)
    caption_text = (
        "–í–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã üìÇ\n\n"
        "–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
    )
    await callback_query.message.answer_document(document, caption=caption_text, reply_markup=material_menu)
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    os.remove(zip_filename)
    os.rmdir(user_folder)

    await callback_query.answer()
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚óÄÔ∏è –ù–∞–∑–∞–¥"
@router.callback_query(lambda c: c.data == "back")
async def go_back(callback_query: CallbackQuery):
    user_id = callback_query.message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result_materials = user_results.get(user_id)

    if not result_materials:
        await callback_query.message.edit_text("–ü–æ–∏—Å–∫ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.")
        return

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    old_material_menu = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=el['topic'], callback_data=f'material_id:{el["material_id"]}')] for el in result_materials
        ]
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–µ–º—ã:",
        reply_markup=old_material_menu
    )