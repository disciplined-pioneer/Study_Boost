from aiogram import types
from aiogram.types import Message
from aiogram import Router, F
from keyboards.platform_keyb import platform_menu, category_keyboard

from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from states.advi—Åe_states import Advi—ÅeStates

from database.requests.user_access import can_use_feature

router = Router()

@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç ‚ûï')
async def start_add(message: Message, state: FSMContext):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@router.callback_query()
async def category_selected(callback: CallbackQuery, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    selected_category = callback.data
    await state.update_data(selected_category=selected_category)
    
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await callback.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Å–æ–≤–µ—Ç–∞:")
    await callback.answer()
    await state.set_state(Advi—ÅeStates.category_advice)

# –¢–µ–∫—Å—Ç —Å–æ–≤–µ—Ç–∞
@router.message(F.text, Advi—ÅeStates.category_advice)
async def process_advice(message: Message, state: FSMContext):
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_category = data.get("selected_category")  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

    await state.update_data(category_advice=message.text)
    await message.answer(f"–í–∞—à —Å–æ–≤–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º: '{message.text}' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{selected_category}' –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ



@router.message(F.text == "–ù–∞–∑–∞–¥ üîô")
async def back_handler(message: types.Message):

    user_id = message.from_user.id
    can_use, response_message = await can_use_feature(user_id)

    if can_use:
        await message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üòä', reply_markup=platform_menu)
    else:
        await message.answer(response_message)