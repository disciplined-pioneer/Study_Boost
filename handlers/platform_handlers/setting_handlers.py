from datetime import datetime

from aiogram import types
from aiogram import Router, F
from aiogram.types import Message

from aiogram.fsm.context import FSMContext
from states.help_suggestion_state import SuggestionsStates

from keyboards.platform_keyb import platform_menu
from keyboards.cancellation_states import cancel_state

from database.requests.user_access import can_use_feature
from database.handlers.database_handler import add_help_suggestion

from NI_assistants.sentiment_text import analyze_sentiment

router = Router()

@router.message(F.text == '–ö–æ–º–∞–Ω–¥—ã üìú')
async def commands_handler(message: Message):
    commands_text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "<b>/start</b> - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üöÄ\n\n"
        "<b>/my_data</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –≤–∫–ª—é—á–∞—è –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üìä\n\n"
        "<b>/my_rating</b> - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ‚≠ê\n\n"
        "<b>/referal_link</b> - –í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π üîó\n\n"
        "<b>/my_referal</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –≤–∞–º–∏ –¥—Ä—É–∑–µ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–∏—Ö –±–æ–Ω—É—Å–æ–≤ üë•\n\n"
        "<b>/top_users</b> - –°–ø–∏—Å–æ–∫ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º üèÜ\n\n"
        "<b>/subscription_status</b> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –í–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ üìÖ\n\n"
        "<b>/cancellation</b> - –û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚ùå\n\n"
    )
    await message.answer(commands_text, parse_mode="HTML")

@router.message(F.text == '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚ûï')
async def suggestions_handler(message: Message, state: FSMContext):

    user_id = message.from_user.id
    can_use, response_message = await can_use_feature(user_id)

    if can_use:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "content", –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å
        await state.set_state(SuggestionsStates.content)
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏–ª–∏ –∏–¥–µ–µ–πüí° \n\n–í–∞—à–∏ –º—ã—Å–ª–∏ –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∏—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!', reply_markup=cancel_state)
    else:
        await message.answer(response_message)

@router.message(SuggestionsStates.content)
async def suggestions_content_handler(message: Message, state: FSMContext):

    user_id = message.from_user.id
    user_question = message.text

    if message.text not in ['/cancellation', '–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚ùå']:
        await state.update_data(question=user_question)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞
        sentiment_score = await analyze_sentiment(message.text)
        if sentiment_score <= -0.01:
            await message.answer("–í–∞—à —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç", reply_markup=cancel_state)
            return
        else:
            await add_help_suggestion(ID_user=user_id,
                                    suggestion_date=datetime.now().date(),
                                    suggestion_type='suggestions',
                                    content=user_question)
            await message.answer(
                f'–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã! üôÇ', reply_markup=platform_menu)
            await state.clear()
    else:
        await state.clear()
        await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º üòä', reply_markup=platform_menu)

@router.message(F.text == "–ù–∞–∑–∞–¥ üîô")
async def back_handler(message: types.Message):

    user_id = message.from_user.id
    can_use, response_message = await can_use_feature(user_id)

    if can_use:
        await message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üòä', reply_markup=platform_menu)
    else:
        await message.answer(response_message)