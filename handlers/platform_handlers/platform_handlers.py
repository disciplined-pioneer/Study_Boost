from aiogram import types
from aiogram import Router, F

from keyboards.advice_keyb import advice_menu
from keyboards.events_keyb import events_menu
from keyboards.platform_keyb import settings_menu
from keyboards.material_keyb import material_menu

from database.requests.user_access import can_use_feature

router = Router()

@router.message(F.text == "–°–æ–≤–µ—Ç—ã ü¶â")
async def advi—Åe_handler(message: types.Message):

    user_id = message.from_user.id
    can_use, response_message = await can_use_feature(user_id)

    if can_use:
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ: ', reply_markup=advice_menu)
    else:
        await message.answer(response_message)

@router.message(F.text == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã üìî")
async def materials_handler(message: types.Message):

    user_id = message.from_user.id
    can_use, response_message = await can_use_feature(user_id)

    if can_use:
        await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏—Ö –∫–Ω–æ–ø–æ–∫: ', reply_markup=material_menu)
    else:
        await message.answer(response_message)

@router.message(F.text == "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üéâ")
async def events_handler(message: types.Message):

    user_id = message.from_user.id
    can_use, response_message = await can_use_feature(user_id)

    if can_use:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:", reply_markup=events_menu)
    else:
        await message.answer(response_message)

@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è")
async def events_handler(message: types.Message):

    user_id = message.from_user.id
    can_use, response_message = await can_use_feature(user_id)

    if can_use:
        await message.answer(f'–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ‚öôÔ∏è', reply_markup=settings_menu)
    else:
        await message.answer(response_message)