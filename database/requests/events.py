from datetime import datetime, timedelta
import aiosqlite

async def get_events_by_period(period: str):
    database_path = 'database/data/events.db'
    today = datetime.now().date()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤—ã–±–æ—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if period == '–Ω–µ–¥–µ–ª—è':
        end_date = today + timedelta(weeks=1)
    elif period == '2 –Ω–µ–¥–µ–ª–∏':
        end_date = today + timedelta(weeks=2)
    elif period == '–º–µ—Å—è—Ü':
        end_date = today + timedelta(weeks=4)
    elif period == '2 –º–µ—Å—è—Ü–∞':
        end_date = today + timedelta(weeks=8)
    else:
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    async with aiosqlite.connect(database_path) as db:
        cursor = await db.execute('''
            SELECT * FROM events
            WHERE date BETWEEN ? AND ?
            ORDER BY date ASC
        ''', (today, end_date))
        
        events = await cursor.fetchall()
        await cursor.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if events:
        events_text = "\n\n".join(
            f"üéâ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ‚Ññ{event[0]}</b>\n"
            f"üìÖ <b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> {event[4]}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {event[5]}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {event[3]}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event[6]}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            for event in events
        )
    else:
        events_text = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç"

    return events_text
