from datetime import datetime

from aiogram import Router
from aiogram.types import Message

from keyboards.registration_keyb import registration_menu
from database.requests.user_search import count_referrals
from handlers.commands_handlers.commands_handlers import user_rating, fetch_user_data, get_top_10_users, user_subscription, payment_information

router = Router()

# –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
@router.message(lambda message: message.text == '/top_users')
async def top_users(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users = await get_top_10_users()
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    if not top_users:
        text = "ü•á –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
    else:
        text = "üèÜ <b>–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü</b>:\n\n"
        for i, (user_id, rating) in enumerate(top_users, start=1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "‚≠êÔ∏è"
            text += f"{medal} <b>–ú–µ—Å—Ç–æ {i}:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} ‚Äî –†–µ–π—Ç–∏–Ω–≥: <b>{rating:.1f}</b>\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(text, parse_mode="HTML")

# –í—ã–≤–æ–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(lambda message: message.text == '/my_rating')
async def my_rating(message: Message):
    user_id = message.from_user.id
    rating = await user_rating(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if rating > 0:
        response = (
            f"üåü <b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b> <b>{rating:.1f}</b>\n\n"
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤–∞—à–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        )
    else:
        response = (
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü\n\n"
            "üí™ –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã! –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!"
        )

    await message.answer(response, parse_mode='HTML')

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@router.message(lambda message: message.text == '/my_data')
async def my_data(message: Message):
    user_id = message.from_user.id
    user_info = await fetch_user_data(user_id)

    if user_info:
        response_text = (
            f"üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"\n<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_info['ID_user']}\n"
            f"\n<b>Telegram:</b> {user_info['telegram']}\n"
            f"\n<b>ID –†–µ—Ñ–µ—Ä–∞–ª–∞:</b> {user_info['referrer_id'] or '–ù–µ—Ç'}\n"
            f"\n<b>–ò–º—è:</b> {user_info['name_user']}\n"
            f"\n<b>–ì–æ—Ä–æ–¥ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞:</b> {user_info['city_university'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞:</b> {user_info['name_university'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"\n<b>–§–∞–∫—É–ª—å—Ç–µ—Ç:</b> {user_info['faculty'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"\n<b>–ö—É—Ä—Å:</b> {user_info['course'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        )
    else:
        response_text = "‚ùå <b>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>"

    await message.answer(response_text, parse_mode='HTML')

# –í—ã–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
@router.message(lambda message: message.text == '/referal_link')
async def referral_handler(message: Message):
    user_id = message.from_user.id  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    referral_link = f"https://t.me/StudyBoost_bot?start={user_id}"
    
    await message.answer(
        f"üîó <b>–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n{referral_link}\n\n"
        "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º! –ï—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–π–¥—É—Ç –ø–æ –Ω–µ–π –∏ –Ω–∞—á–Ω—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, "
        "–≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –±–æ–Ω—É—Å—ã:\n\n"
        "1Ô∏è‚É£ <b>+5 –±–∞–ª–ª–æ–≤ –∫ –≤–∞—à–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ üìà\n"
        "2Ô∏è‚É£ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ù–ê–í–°–ï–ì–î–ê</b> –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ üÜì\n\n"
        "–°—Ç–∞–Ω—å—Ç–µ —Ç–æ–ø-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏!"
    , parse_mode="HTML")

# –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(lambda message: message.text == '/my_referal')
async def referral_handler(message: Message):
    user_id = message.from_user.id
    referral_count = await count_referrals(user_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    
    await message.answer(
        f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:</b> <u>{referral_count}</u>\n\n"
        "üì¢ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b>\n\n"
        "1Ô∏è‚É£ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>+5 –±–∞–ª–ª–æ–≤</b> –∫ –≤–∞—à–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É üìà\n"
        f"2Ô∏è‚É£ –ï—Å–ª–∏ –≤—ã –ø—Ä–∏–≤–µ–¥—ë—Ç–µ <b>10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>, –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –≤–∞—Å —Å—Ç–∞–Ω–µ—Ç <b>–±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ù–ê–í–°–ï–ì–î–ê</b> üÜì\n\n"
        "üí° <i>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–≤—ã—à–∞–π—Ç–µ —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞!</i>"
    , parse_mode="HTML")

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ–º—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
@router.message(lambda message: message.text == '/subscription_status')
async def subscription_status(message: Message):

    # –û–ø—Ä–µ–¥–µ–ª–µ—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    subscription_data = await user_subscription(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    if not subscription_data:
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_status = subscription_data[0]
    payment_data = await payment_information(user_id)

    # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    if not payment_data:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –æ–ø–ª–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    payment_date = datetime.strptime(payment_data[0], '%Y-%m-%d').date()
    expiration_date = datetime.strptime(payment_data[1], '%Y-%m-%d').date()
    days_left = (expiration_date - datetime.now().date()).days

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response_message = (
        f"üîî <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscription_status}\n"
        f"üíµ <b>–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã:</b> {payment_date.strftime('%d.%m.%Y')}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {expiration_date.strftime('%d.%m.%Y')}\n"
        f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {days_left} –¥–Ω–µ–π"
    )

    await message.answer(response_message, parse_mode='HTML')

# –í—ã–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
@router.message(lambda message: message.text == '/cancellation')
async def cancellation_handler(message: Message):
    await message.answer(
            '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º üòä',
            reply_markup=registration_menu
        )